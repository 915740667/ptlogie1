<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ptlogie.mapper.DatainfoMapper" >
  <resultMap id="BaseResultMap" type="com.ptlogie.domain.Datainfo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="sensorId" property="sensorid" jdbcType="INTEGER" />
    <result column="temperature" property="temperature" jdbcType="REAL" />
    <result column="humidity" property="humidity" jdbcType="REAL" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, sensorId, temperature, humidity, updatetime, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ptlogie.domain.DatainfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from datainfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from datainfo
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from datainfo
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ptlogie.domain.DatainfoExample" >
    delete from datainfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ptlogie.domain.Datainfo" >
    insert into datainfo (id, sensorId, temperature, 
      humidity, updatetime, status
      )
    values (#{id,jdbcType=INTEGER}, #{sensorid,jdbcType=INTEGER}, #{temperature,jdbcType=REAL}, 
      #{humidity,jdbcType=REAL}, #{updatetime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ptlogie.domain.Datainfo" >
    insert into datainfo
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="sensorid != null" >
        sensorId,
      </if>
      <if test="temperature != null" >
        temperature,
      </if>
      <if test="humidity != null" >
        humidity,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="sensorid != null" >
        #{sensorid,jdbcType=INTEGER},
      </if>
      <if test="temperature != null" >
        #{temperature,jdbcType=REAL},
      </if>
      <if test="humidity != null" >
        #{humidity,jdbcType=REAL},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ptlogie.domain.DatainfoExample" resultType="java.lang.Integer" >
    select count(*) from datainfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update datainfo
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.sensorid != null" >
        sensorId = #{record.sensorid,jdbcType=INTEGER},
      </if>
      <if test="record.temperature != null" >
        temperature = #{record.temperature,jdbcType=REAL},
      </if>
      <if test="record.humidity != null" >
        humidity = #{record.humidity,jdbcType=REAL},
      </if>
      <if test="record.updatetime != null" >
        updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update datainfo
    set id = #{record.id,jdbcType=INTEGER},
      sensorId = #{record.sensorid,jdbcType=INTEGER},
      temperature = #{record.temperature,jdbcType=REAL},
      humidity = #{record.humidity,jdbcType=REAL},
      updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ptlogie.domain.Datainfo" >
    update datainfo
    <set >
      <if test="sensorid != null" >
        sensorId = #{sensorid,jdbcType=INTEGER},
      </if>
      <if test="temperature != null" >
        temperature = #{temperature,jdbcType=REAL},
      </if>
      <if test="humidity != null" >
        humidity = #{humidity,jdbcType=REAL},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ptlogie.domain.Datainfo" >
    update datainfo
    set sensorId = #{sensorid,jdbcType=INTEGER},
      temperature = #{temperature,jdbcType=REAL},
      humidity = #{humidity,jdbcType=REAL},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
    <select id="getDataList" resultType="java.util.Map"  >
    select t4.sensorId,t4.temperature,t4.humidity,t4.updatetime,t4.status,t4.equipmentId,t4.equipmentName,t4.sceneId,t5.sceneName from scene t5 join 
 (select t2.sensorId,t2.temperature,t2.humidity,t2.updatetime,t2.status,t2.equipmentId,t3.equipmentName,t3.sceneId from equipment t3 join 
  (select t1.sensorId,t1.temperature,t1.humidity,t1.updatetime,t1.status,s.equipmentId from sensor s join
  (select sensorId,temperature,humidity,updatetime,status from datainfo)t1
  on s.sensorId=t1.sensorId)t2  on t3.equipmentId=t2.equipmentId)t4
  on t5.sceneId=t4.sceneId
  </select> 
    <select id="getCountToDay" resultType="java.lang.Integer"  >
    select count(id)
    from datainfo 
    where to_days(updatetime) = to_days(now())
  </select>
  
  
    <select id="getCountToMonth" resultType="java.lang.Integer"  >
    
     SELECT count(id) FROM datainfo WHERE DATE_FORMAT( updatetime, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
  </select>
</mapper>